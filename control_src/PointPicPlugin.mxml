<?xml version="1.0" encoding="utf-8"?>
<!---
   控制指正图片的类.
   
	 <table class="innertable">
	 <tr><th>标签</th><td>值</td></tr>
	 <tr><th>Link:</th><td>未知</td></tr>
	 <tr><th>插件类型:</th><td>Control显示插件</td></tr>
	 <tr><th>插件位置:</th><td>外部插件</td></tr>
	 <tr><th>插件路径:</th><td>plugins/pointpic.swf</td></tr>
	 <tr><th>可存档:</th><td>否</td></tr>
	 </table>
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="256" height="192"  
				backgroundAlpha="0" layout="absolute" implements="com.nz.IPlugin" creationComplete="main()">
	<!---@private-->
	<mx:Canvas id="con">
		<!---@private-->
		<mx:SWFLoader id="bgloader"/>
		<!---@private-->
		<mx:Canvas id="area" click="area_click(event)">
			<!---@private-->
			<mx:VBox id="abg" width="256" height="192" backgroundAlpha="0" backgroundColor="0xffffff"/>
		</mx:Canvas>
		<!---@private-->
		<mx:UIComponent id="cross" mouseEnabled="false" mouseChildren="false"/>
	</mx:Canvas>
	<mx:Script>
		<![CDATA[
			import com.Assets;
			import com.Background;
			import com.FileManage;
			import com.FuncMan;
			import com.greensock.TweenLite;
			import com.nz.FrameInstance;
			import com.nz.GlobalKeyMap;
			import com.nz.PluginsType;
			import com.nz.Transport;
			import com.Script;
			import cont.Cross_;
			import flash.display.DisplayObject;
			import flash.display.Sprite;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import flash.utils.Dictionary;
			import mx.containers.Canvas;
			import mx.core.FlexSprite;
			import mx.core.UIComponent;
			private var dic:Dictionary;
			/**@private */
			public var func:FuncMan;
			private var _enabled:Boolean;
			private var dragState:Boolean;
			private var crossDelta:int = 3;//Cross移动的最小距离
			
			private function main():void
			{
				var c:Cross_ = new Cross_();
				cross.addChild(c);
				
				func = new FuncMan();
				func.setFunc("init", { type:Script.ComplexParams,progress:false,down:false } );
			}
			/**@private */
			public function get content():DisplayObject
			{
				return con as DisplayObject;
			}
			/**
			 * 初始化插件.
			 * @param	content XML列表.
			 * <p>position的4个数据分别是x,y,width,height</p>
			 * @param	str 图片路径.不设置标示从背景读取
			 * @example
			 * <listing version="3.0">
			 *  &lt;pp_pi init=""&gt;
			 *      &lt;content position="30;30;10;10"&gt;
			 *          &lt;...place script here...&gt;
			 *      &lt;/content&gt;
			 *      &lt;content position="60;60;10;10"&gt;
			 *          &lt;...place script here...&gt;
			 *      &lt;/content&gt;
			 *  &lt;/pp_pi &gt;
			 * </listing>
			 */
			public function init(content:XML,str:String=null):void
			{
				//str==""表示从背景取得图像
				if (str == "") {
					bgloader.source = FileManage.getResolvePath((Transport.Pro["Bg"] as Background).path);
				}else {
					bgloader.source = FileManage.getResolvePath(str);
				}
				bgloader.y = -192;
				clean();
				for each(var x:XML in content.children()) {
					addPoint(x);
				}
				Transport.Pro["Control"].activePlugin(this);
				this.stage.addEventListener(KeyboardEvent.KEY_DOWN, keydown_event);
				this.stage.addEventListener(KeyboardEvent.KEY_UP, keyup_event);
				TweenLite.to(bgloader, 1, { y:0 } );
				cross.startDrag(true, new Rectangle(0, 0, 256, 192));
				dragState = true;
			}
			/**@private */
			public function crossDeltaMove(way:String,direction:int):void
			{
				if (dragState) {
					dragState = false;
					con.addEventListener(MouseEvent.MOUSE_MOVE, continueCrossDrag);
					cross.stopDrag();
				}
				cross[way] += direction * crossDelta;
				if (cross.x > 256 || cross.x < 0 || cross.y > 192 || cross.y < 0) {
					cross[way] -= direction * crossDelta;
				}
			}
			/**@private */
			public function continueCrossDrag(e:MouseEvent):void
			{
				if (!dragState) {
					con.removeEventListener(MouseEvent.MOUSE_MOVE, continueCrossDrag);
					dragState = true;
					cross.startDrag(true,new Rectangle(0, 0, 256, 192));
				}
			}
			/**@private */
			public function cellClickCheck():void
			{
				var e:MouseEvent = new MouseEvent(MouseEvent.CLICK);
				
				for (var i:int = 1; i < area.numChildren; i++ ) {
					var cell:DisplayObject = area.getChildAt(i);
					if (cross.getChildAt(0)["center"].hitTestObject(cell)) {
						cell.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true));
						//dispatchEvent(new BasisEvent(CELL_CLICK, false, false, cell));
						return;
					}
				}
				abg.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true));
				//dispatchEvent(new BasisEvent(CELL_CLICK, false, false, main.getChildAt(0)));
			}
			private function keyup_event(e:KeyboardEvent):void
			{
				switch(e.keyCode) {
					case GlobalKeyMap.ConfirmButton:
						cellClickCheck();
					break;
				}
			}
			private function keydown_event(e:KeyboardEvent):void 
			{
				switch(e.keyCode) {
					case GlobalKeyMap.UpArrow:
						crossDeltaMove("y", -1);
					break;
					case GlobalKeyMap.DownArrow:
						crossDeltaMove("y", 1);
					break;
					case GlobalKeyMap.LeftArrow:
						crossDeltaMove("x", -1);
					break;
					case GlobalKeyMap.RightArrow:
						crossDeltaMove("x", 1);
					break;
					default:
						return;
					break;
				}
				if (dragState) {
					cross.stopDrag();
					dragState = false;
				}

			}
			private function area_click(e:MouseEvent):void
			{
				this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keydown_event);
				this.stage.removeEventListener(KeyboardEvent.KEY_UP, keyup_event);
				var s:Script = Transport.Pro["Script"];
				if (e.target is Canvas ) {
					s.insert(dic[e.target]);
				}else {
					s.sign();
					s.gotoSign("DEFAULT_POINTPIC");
				}
				Transport.Pro["Control"].activePlugin(null);
				cross.stopDrag();
				dragState = false;
				s.start();
			}
			/**@private */
			public function close():void { };
			private function clean():void
			{
				while (area.numChildren > 1) {
					area.removeChildAt(1);
				}
				dic = new Dictionary();
			}
			private function addPoint(xml:XML):void
			{
				var sp:Canvas = new Canvas();
				var ar:Array = Assets.formatTextToArray(xml.@position.toString());
				sp.graphics.beginFill(0x000000, 0.5);
				sp.graphics.drawRect(0, 0, ar[2], ar[3]);
				sp.graphics.endFill();
				sp.x = ar[0];
				sp.y = ar[1];
				dic[sp] = xml.children()[0];
				area.addChild(sp);
			}
			/**@private */
			public function get pluginType():String
			{
				return PluginsType.CONTROL_DISPLAY_TYPE;
			}
			/**@private */
			public function set type(value:String):void { }
			/**@private */
			public function get type():String
			{
				return "null";
			}
		]]>
	</mx:Script>
</mx:Application>